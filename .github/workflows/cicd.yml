name: CI-CD

permissions:
  contents: read

on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - "main"
env:
  AWS_REGION: "ap-northeast-2"
  BE_ECR_REPOSITORY: "slam-server"
  FE_ECR_REPOSITORY: "slam-server-front"
  NEXT_PUBLIC_BASE: "https://jungle-lms.site"
  NEXT_PUBLIC_WS: "wss://jungle-lms.site"
  NEXT_PUBLIC_VAPID_PUBLIC_KEY: "BNreSJUzEIIAWG-qnlzRvYepD_svGLY6PJtNO4F6O8Vu9Ev_bMZK5albJ2OJCBOkn2-9bJcTIpx_4Z02YSEarwU"

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Nextjs
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: FE/package-lock.json

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('BE/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Debug build context
        run: |
          ls -al
          ls -al ./BE
          cat ./BE/requirements.txt

      - name: Build and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          BE_ECR_REPOSITORY: ${{ env.BE_ECR_REPOSITORY }}
          FE_ECR_REPOSITORY: ${{ env.FE_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --no-cache \
          --build-arg NEXT_PUBLIC_BASE=${{ env.NEXT_PUBLIC_BASE }} \
          --build-arg NEXT_PUBLIC_WS=${{ env.NEXT_PUBLIC_WS }} \
          --build-arg NEXT_PUBLIC_VAPID_PUBLIC_KEY=${{ env.NEXT_PUBLIC_VAPID_PUBLIC_KEY }} \
          -t $ECR_REGISTRY/$FE_ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$FE_ECR_REPOSITORY:latest ./FE
          docker push $ECR_REGISTRY/$FE_ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$FE_ECR_REPOSITORY:latest

          docker build --no-cache \
          -t $ECR_REGISTRY/$BE_ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$BE_ECR_REPOSITORY:latest ./BE
          docker push $ECR_REGISTRY/$BE_ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$BE_ECR_REPOSITORY:latest

      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: |
            docker-compose.yml
          target: /home/ec2-user

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            printf '%s\n' "${{ secrets.PROD_ENV_FILE_2 }}" | base64 -d > /home/ec2-user/.env

            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            cd /home/ec2-user

            docker-compose pull
            docker-compose down
            docker-compose up -d
            docker image prune -a -f
